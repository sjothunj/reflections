How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	It you can pinpoint the line in question, spotting the error is far easier. Once the line has been identified, doing a character by character comparison is manageable and, for some bugs, necessary to identify the issue.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	It would make it easier to spot a difference and would also encouraging thinking about changes/additions that are made as logical blocks which should help in the design phase.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros are that you can be pretty sure that when you manually choose, you have a logical milestone of a workable build. The con is that you are you have to rely on yourself to remember to make that commit and to document it accordingly.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    The tools that allow multiple files are usually associated with software or website development where multiple files define a discrete body of work. With Google Docs, for example, there isn't any logical association between separate files except ones that a user would manually enforce.

How can you use the commands git log and git diff to view the history of files?

    git log presents a nice digest of each commit that you can then use git diff to view the details of what has changed

How might using version control make you more confident to make changes that could break something?

    Making wholesale changes to code usually means biting off a large chunk of work but with version control and being able to easily rollback to a working commit, forking branches, etc. would make it far easier to make changes.
    I especially like the idea of being able to merge back portions of branches into the master so that any incremental improvements made on a fork/branch are easily folded back in. Trying to do that manually would be a nightmare.

Now that you have your workspace set up, what do you want to try using Git for?

    Well, the first thing I think I'll do it use it to keep sync'd on progress/work done on these projects from the two machines that I am using.
    The second thing will be to set up a training tracking sheet that I will use commits to keep a log of the changes and therefore my progress.
    With a tool like git you could use it to track almost anything that changed over time. Genetic mutations in population over time?! Anything you can think of really.
	
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
	Granular control would be best, especially as the size of a commit is not based on lines changed or character count. Size is relative/contextual.
